import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { useWallet } from '../context/WalletContext';
import { Button, Card } from '../components/UI';
import { Database, Shield, Zap, Globe, ArrowRight, Image, Video, FileText, Music } from 'lucide-react';

const Home = () => {
  const { isConnected } = useWallet();

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-gray-50">
      {/* Hero Section */}
  <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pt-28 pb-20">
        <div className="text-center">
          <h1 className="text-5xl md:text-6xl font-bold text-gray-900 mb-6">
            <span className="pixel-font block text-3xl md:text-4xl" style={{ color: '#7E5CE2' }}>AI-Powered</span>
            <span className="brand-heading block text-5xl md:text-6xl" style={{ color: '#ff9c3f' }}>Synthetic Data Generation</span>
          </h1>
          {/* Hero images carousel - three images from public folder that rotate with center highlighted */}
          <HeroImages />
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Request custom synthetic datasets generated by AI models with built-in quality verification,
            blockchain transparency, and IPFS-backed reporting.
          </p>
          
          <div className="flex items-center justify-center gap-4">
            {isConnected ? (
              <Link to="/dashboard">
                <Button size="lg">
                  <Database className="h-5 w-5 mr-2" />
                  Go to Dashboard
                </Button>
              </Link>
            ) : (
              <Button size="lg">
                Connect Wallet to Get Started
              </Button>
            )}
          </div>
        </div>
      </div>

      {/* Features */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
        <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
          How It Works
        </h2>
        
        {/* Timeline-like feature layout: centered vertical line with cards alternating left/right */}
        <div className="relative max-w-6xl mx-auto py-8">
          {/* central line (purple) */}
          <div className="hidden md:block absolute left-1/2 top-0 bottom-0 w-1.5 bg-[#7E5CE2]/50 transform -translate-x-1/2" />

          {/* feature items */}
          {[
            { icon: <Database className="h-6 w-6 text-black" />, title: 'Request Data', description: 'Specify your requirements and optionally provide sample data', badge: 'Request' },
            { icon: <Zap className="h-6 w-6 text-black" />, title: 'AI Generation', description: 'AI models generate your custom dataset instantly', badge: 'AI' },
            { icon: <Shield className="h-6 w-6 text-black" />, title: 'Quality Check', description: 'Automated verification with reports stored on IPFS', badge: 'QA' },
            { icon: <Globe className="h-6 w-6 text-black" />, title: 'View Results', description: 'Access dataset and transparent QA reports', badge: 'View' },
          ].map((f, i) => (
            <FeatureCard
              key={i}
              icon={f.icon}
              title={f.title}
              description={f.description}
              badge={f.badge}
              side={i % 2 === 0 ? 'left' : 'right'}
            />
          ))}
        </div>
      </div>

      {/* Benefits */}
      <div className="bg-white py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-12 items-center">
            <div>
              <h2 className="pixel-font text-5xl md:text-7xl font-extrabold leading-tight text-[#7E5CE2] mb-6">
                Why Synthetic Data?
              </h2>
              <ul className="space-y-6 md:space-y-8">
                <BenefitItem text="Instant AI-powered dataset generation" />
                <BenefitItem text="Automated quality verification" />
                <BenefitItem text="Blockchain-backed transparency" />
                <BenefitItem text="IPFS quality reports" />
                <BenefitItem text="Support for multiple data formats" />
              </ul>
            </div>
            
            <div className="grid grid-cols-2 gap-6">
              <StatCard label="Requests" value="1,234" />
              <StatCard label="Datasets" value="5,678" />
              <StatCard label="Avg Score" value="92/100" />
              <StatCard label="Users" value="456" />
            </div>
          </div>
        </div>
      </div>

      {/* Formats supported - carousel of sample images (img4.png..img7.png) */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
        <h3 className="text-2xl font-semibold text-center mb-6">Formats we support</h3>
        <h3 className="text-2xl font-semibold text-center mb-6">Image , Audio , Video , Text </h3>
        <div className="flex items-center justify-center">
          <FormatsCarousel />
        </div>
      </div>

      {/* CTA */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
  <Card className="p-12 text-center bg-gradient-to-r from-[#FFF7E6] to-[#FFF0CC] border-primary-200">
          <h2 className="text-3xl font-bold text-gray-900 mb-4">
            Ready to get started?
          </h2>
          <p className="text-gray-600 mb-8 text-lg">
            Connect your wallet and start generating synthetic datasets today
          </p>
        </Card>
      </div>
    </div>
  );
};

const FeatureCard = ({ icon, title, description, side = 'left', badge }) => {
  // side: 'left' or 'right' - determines alignment along the vertical timeline
  const isLeft = side === 'left';

  return (
    <div className={`w-full flex ${isLeft ? 'justify-start' : 'justify-end'} mb-10`}> 
      <div className={`relative w-full max-w-2xl ${isLeft ? 'pl-4 md:pr-12' : 'pr-4 md:pl-12'}`}>
        {/* icon circle positioned next to the card */}
        <div className={`absolute top-4 md:top-6 ${isLeft ? '-left-10 md:-left-12' : '-right-10 md:-right-12'} flex items-center`}>
          <div className="w-16 h-16 md:w-20 md:h-20 rounded-full bg-[#FFCC33] flex items-center justify-center shadow-lg">
            {/* ensure inner icon scales up */}
            <div className="transform scale-110 text-black">{icon}</div>
          </div>
        </div>

        {/* Card body - rounded on the outer side to mimic the design; larger padding to fill gaps */}
        <Card className={`p-8 md:p-10 hover:shadow-xl transition-transform transform ${isLeft ? 'rounded-tr-3xl rounded-br-3xl rounded-bl-xl' : 'rounded-tl-3xl rounded-bl-3xl rounded-br-xl'}`}>
          <h3 className="text-lg md:text-2xl font-semibold text-black mb-3">{title}</h3>
          <p className="text-black text-sm md:text-base mb-5">{description}</p>
          {badge && (
            <span className="inline-block px-4 py-1.5 rounded-full bg-[#7E5CE2] text-white text-sm">{badge}</span>
          )}
        </Card>
      </div>
    </div>
  );
};

const BenefitItem = ({ text }) => {
  return (
    <li className="flex items-start">
      <svg className="h-6 w-6 text-green-500 mr-3 flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
      </svg>
      <span className="text-gray-700 text-lg md:text-2xl font-medium">{text}</span>
    </li>
  );
};

const StatCard = ({ label, value }) => {
  return (
    <Card className="p-8 md:p-10 min-h-[110px] flex flex-col justify-center">
      <p className="text-sm md:text-base font-medium text-black mb-2">{label}</p>
      <p className="text-3xl md:text-4xl font-extrabold text-[#FF5C5C]">{value}</p>
    </Card>
  );
};

export default Home;

// HeroImages component placed after default export so it's local to this file
const HeroImages = () => {
  // Using .jpeg per your note; adjust filenames in public/ if needed
  const images = ['/img1.jpg', '/img2.jpg', '/img3.jpg'];
  const [active, setActive] = useState(0);

  useEffect(() => {
    const id = setInterval(() => {
      setActive((a) => (a + 1) % images.length);
    }, 3000);
    return () => clearInterval(id);
  }, []);

  return (
    // Taller container so images can be larger and still overlap; add bottom margin so following text/buttons don't get overlapped
    <div className="mt-8 mb-12 md:mb-24 flex justify-center items-center relative w-full" style={{ height: 360 }}>
      {images.map((src, i) => {
        const isActive = i === active;
        const nextIndex = (active + 1) % images.length;
        const prevIndex = (active + images.length - 1) % images.length;

        // horizontal scaling (scaleX) + horizontal translate so side images remain visible
        const baseWidth = 520; // base intrinsic width used before horizontal scaling
        const activeScaleX = 1.05; // slightly wider for center
        const sideScaleX = 0.7; // squeeze sides horizontally
        const offsetX = 220; // px horizontal offset for sides
        let translateX = 0;
        let scaleX = 1;
        let rotateDeg = 0;
        let zIndex = 30;

        if (isActive) {
          translateX = 0;
          scaleX = activeScaleX;
          rotateDeg = 0;
          zIndex = 50;
        } else if (i === prevIndex) {
          translateX = -offsetX;
          scaleX = sideScaleX;
          rotateDeg = -6;
          zIndex = 40;
        } else if (i === nextIndex) {
          translateX = offsetX;
          scaleX = sideScaleX;
          rotateDeg = 6;
          zIndex = 40;
        } else {
          translateX = 0;
          scaleX = 0.6;
          rotateDeg = 0;
          zIndex = 20;
        }

        const transformStr = `translateX(${translateX}px) scaleX(${scaleX}) rotate(${rotateDeg}deg)`;

        return (
          <img
            key={i}
            src={src}
            alt={`hero-${i}`}
            className={`absolute rounded-xl shadow-2xl object-cover transition-all duration-900 ease-in-out`}
            style={{
              height: '100%',
              width: baseWidth,
              transform: transformStr,
              zIndex,
            }}
          />
        );
      })}
    </div>
  );
};

// Formats carousel used in the "Formats we support" section
// Uses a small onError fallback sequence so missing extensions (png/jpg/jpeg) don't break rendering
const FormatsCarousel = () => {
  const bases = ['img4', 'img5', 'img6', 'img7'];
  const exts = ['.png', '.jpg', '.jpeg'];
  const [idx, setIdx] = useState(0);
  // initialize to .jpg since project files are .jpg; fallback will try other extensions if needed
  const [srcs, setSrcs] = useState(() => bases.map((b) => `/${b}.jpg`));

  useEffect(() => {
    const id = setInterval(() => setIdx((i) => (i + 1) % bases.length), 2000);
    return () => clearInterval(id);
  }, []);

  const handleImgError = (i) => {
    setSrcs((prev) => {
      const next = [...prev];
      const cur = prev[i] || '';
      const base = bases[i];
      const dotIndex = cur.lastIndexOf('.');
      const curExt = dotIndex !== -1 ? cur.slice(dotIndex).toLowerCase() : '';
      const curIdx = exts.indexOf(curExt);
      const nextIdx = (curIdx + 1) % exts.length;
      // if current ext not found, start at 0
      const tryExt = exts[nextIdx] || exts[0];
      // If we've already tried all extensions (and ended up back where we started), blank the src to avoid infinite loop
      if (prev[i] && prev[i].endsWith(tryExt) && prev[i] !== `/${base}${tryExt}`) {
        next[i] = `/${base}${tryExt}`;
      } else if (prev[i] === `/${base}${tryExt}`) {
        // we've cycled back; give up
        next[i] = '';
      } else {
        next[i] = `/${base}${tryExt}`;
      }
      return next;
    });
  };

  return (
    <div className="relative w-full max-w-4xl h-48 md:h-64 flex items-center justify-center">
      {srcs.map((src, i) => {
        const visible = i === idx;
        return (
          <img
            key={i}
            src={src}
            onError={() => handleImgError(i)}
            alt={`format-${i}`}
            className={`absolute rounded-lg object-cover transition-all duration-800 ease-in-out transform ${visible ? 'opacity-100 scale-100 translate-y-0 z-30' : 'opacity-0 scale-95 -translate-y-2 z-10'} w-11/12 md:w-3/4 h-full`}
            style={{ pointerEvents: 'none' }}
          />
        );
      })}
    </div>
  );
};